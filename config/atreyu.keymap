/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DEFAULT 0
#define LOW     1
#define RAISE   2
#define QWERT   3

/ {
	behaviors {
	    ctrl_tab: ctrl_tab {
		compatible = "zmk,behavior-mod-morph";
		label = "GUI_CTRL_TAB";
		#binding-cells = <0>;
		bindings = <&kp LC(TAB)>, <&kp LC(LS(TAB))>;
		mods = <(MOD_LGUI)>;
	    };
	    shiftable_tab: shiftable_tab {
		compatible = "zmk,behavior-mod-morph";
		label = "CTRL_TAB";
		#binding-cells = <0>;
		bindings = <&kp TAB >, <&ctrl_tab>;
		mods = <(MOD_LCTL)>;
	    };
            gresc: grave_escape {
                compatible = "zmk,behavior-mod-morph";
                label = "GRAVE_ESCAPE";
                #binding-cells = <0>;
                bindings = <&kp ESC>, <&kp GRAVE>;
                mods = <(MOD_LGUI)>;
    	        keep-mods = <(MOD_LGUI)>;
            };
	};

        keymap {
                compatible = "zmk,keymap";

                default_layer {
                        bindings = <

   &gresc    &kp N1   &kp N2   &kp N3   &kp N4  &kp N5    &kp N6 &kp N7    &kp N8    &kp N9  &kp N0   &kp BSPC
   &kp TAB   &kp SQT  &kp COMMA &kp DOT  &kp P   &kp Y     &kp F  &kp G   &kp C     &kp R   &kp L    &kp SLASH
   &kp LSHFT &kp A    &kp O    &kp E    &kp U   &kp I     &kp D  &kp H     &kp T     &kp N   &kp S    &kp MINUS
   &kp LCTRL &kp SEMI &kp Q   &kp J    &kp K   &kp X     &kp B  &kp M     &kp W     &kp V   &kp Z    &kp BSLH
   &tog QWERT   &kp LALT   &kp LGUI  &mo RAISE   &kp RET &kp LEFT_BRACKET &kp RIGHT_BRACKET  &kp SPACE &mo LOW  &kp EQUAL  &kp GRAVE   &kp X

   // &gresc          &kp N1  &kp N2   &kp N3   &kp N4  &kp N5       &kp N6       &kp N7    &kp N8    &kp N9  &kp N0   &kp P
   // &shiftable_tab  &kp Q   &kp W    &kp E    &kp R   &kp T        &kp Y        &kp U     &kp I     &kp O   &kp P    &kp BSPC
   // &kp LCTRL       &kp A   &kp S    &kp D    &kp F   &kp G        &kp H        &kp J     &kp K     &kp L   &kp SEMI &kp SQT
   // &kp LSHFT       &kp Z   &kp X    &kp C    &kp V   &kp B        &kp N        &kp M     &kp COMMA &kp DOT &kp FSLH &mt RSHFT RET
   // &mo 3           &mo 2   &kp LALT &kp LGUI &kp RET &kp LC(LALT) &kp LC(LALT) &kp SPACE &mo 1     &mo 3   &none    &kp RCTRL
// &mo 3           &mo 2   &kp LALT &kp LGUI &kp RET &none     &none  &kp SPACE &mo 1     &mo 3   &none    &kp RCTRL
                        >;
			sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
                };

                // mo 1, lower
                lower_layer {
                        bindings = <
   &none &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &none     &none    &none    &kp C_PREV &kp C_PLAY_PAUSE  &kp C_NEXT    &none
   &none    &none    &none    &none    &none    &none             &none     &kp UP    &none    &none    &none    &kp C_VOL_UP
   &none    &none    &none    &none    &none    &none             &kp LEFT  &kp DOWN  &kp RIGHT    &none    &none    &kp C_VOL_DN
   &none    &none    &none    &none    &none    &none             &none    &none     &none    &none    &none    &kp C_MUTE
   &bt BT_CLR    &none    &none    &none    &none    &none             &none    &none     &none    &none    &none    &none
                        >;
                        sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
                };

                // mo 2, rise
                raise_layer {
                        bindings = <
   &none    &none    &none    &none    &none    &none             &none        &none            &none       &none    &none    &none
   &none    &none    &none    &none    &none    &none             &kp KP_PLUS  &kp LPAR         &kp RPAR    &none    &none    &none
   &none    &none    &none    &none    &none    &none             &kp KP_MINUS &kp LEFT_BRACE   &kp RIGHT_BRACE    &none    &none    &none
   &none    &none    &none    &none    &none    &none             &kp EQUAL    &kp LEFT_BRACKET &kp RIGHT_BRACKET    &none    &none    &none
   &none    &none    &none    &none    &none    &none             &none        &none            &none       &none    &none    &none
                        >;
                        sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
                };

                qwerty_layer {
                        bindings = <

   // &gresc          &kp N1  &kp N2   &kp N3   &kp N4  &kp N5       &kp N6       &kp N7    &kp N8    &kp N9  &kp N0   &kp P
   // &shiftable_tab      &kp BSPC
   // &kp LCTRL        &kp SQT
   // &kp LSHFT        &mt RSHFT RET

   &gresc    &kp N1   &kp N2   &kp N3   &kp N4  &kp N5    &kp N6 &kp N7    &kp N8    &kp N9  &kp N0   &kp BSPC
   &kp TAB   &kp Q   &kp W    &kp E    &kp R   &kp T        &kp Y        &kp U     &kp I     &kp O   &kp P    &kp SLASH
   &kp LSHFT &kp A   &kp S    &kp D    &kp F   &kp G        &kp H        &kp J     &kp K     &kp L   &kp SEMI    &kp SQT
   &kp LCTRL &kp Z   &kp X    &kp C    &kp V   &kp B        &kp N        &kp M     &kp COMMA &kp DOT &kp FSLH &kp FSLH
   &tog QWERT  &kp LALT   &kp LGUI  &mo RAISE   &kp RET &none &none  &kp SPACE &mo LOW     &kp EQUAL  &kp GRAVE   &kp RCTRL
                        >;
                        sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
                };


   //              raise_layer {
   //                      bindings = <
   // &bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &trans        &kp HOME  &kp END   &trans    &kp LBRC   &kp RBRC  &kp TILDE
   // &trans     &trans       &trans       &trans       &kp HOME     &kp END       &kp PG_UP &kp DOWN  &kp UP    &kp LBKT   &kp RBKT  &kp DEL
   // &trans     &trans       &trans       &trans       &trans       &trans        &kp PG_DN &kp LEFT  &kp DOWN  &kp RIGHT  &kp PIPE  &kp RET
   // &trans     &trans       &trans       &trans       &trans       &trans        &kp UNDER &kp MINUS &kp EQUAL &kp PLUS   &kp BSLH  &trans
   // &trans     &trans       &trans       &trans       &trans       &kp HOME      &kp END   &trans    &trans    &trans     &trans    &trans
   //                      >;
// 			sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
   //              };

   //              lower_layer {
   //                      bindings = <
   // &trans        &kp F1    &kp F2    &kp F3    &kp F4       &kp F5        &kp F6    &kp F7    &kp F8    &kp F9    &kp F10   &trans
   // &trans        &kp F11   &kp F12   &trans    &trans       &trans        &tog 0    &trans    &trans    &trans    &trans    &trans 
   // &kp LG(LC(Q)) &trans    &trans    &trans    &trans       &trans        &trans    &trans    &tog 4    &trans    &trans    &trans 
   // &trans        &kp CAPS  &trans    &trans    &kp LC(LEFT) &kp LC(RIGHT) &trans    &trans    &trans    &trans    &trans    &trans 
   // &trans        &trans    &trans    &trans    &trans       &trans        &trans    &trans    &trans    &trans    &trans    &trans 
   //                      >;
// 			sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
   //              };

   //              nav_layer {
   //                      bindings = <
   // &trans        &kp LC(N1) &kp LC(N2) &kp LC(N3) &kp LC(N4)    &kp LC(N5)     &kp LC(N6) &kp LC(N7)      &kp LC(N8) &kp LC(N9)      &kp LC(N0) &trans
   // &kp BSPC      &trans     &trans     &kp UP     &trans        &kp PG_UP      &trans     &trans          &trans     &trans          &trans     &trans 
   // &trans        &trans     &kp LEFT   &kp DOWN   &kp RIGHT     &kp PG_DN      &trans     &kp LC(LEFT)    &trans     &kp LC(RIGHT)   &trans     &trans 
   // &trans        &kp CAPS   &trans     &trans     &kp LC(LEFT)  &kp LC(RIGHT)  &trans     &kp LC(LS(TAB)) &kp LG(R)  &kp LC(TAB)     &trans     &trans 
   // &trans        &trans     &trans     &trans     &kp SPACE     &trans         &trans     &trans          &trans     &trans          &trans     &trans 
   //                      >;
// 			sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
   //              };
// 		colemak_layer {
   //                      bindings = <
   // &gresc          &kp N1  &kp N2   &kp N3   &kp N4  &kp N5    &kp N6 &kp N7    &kp N8    &kp N9  &kp N0   &kp GRAVE
   // &shiftable_tab  &kp Q   &kp W    &kp F    &kp P   &kp G     &kp J  &kp L     &kp U     &kp Y   &kp SEMI &kp BSPC
   // &kp LCTRL       &kp A   &kp R    &kp S    &kp T   &kp D     &kp H  &kp N     &kp E     &kp I   &kp O    &kp SQT
   // &kp LSHFT       &kp Z   &kp X    &kp C    &kp V   &kp B     &kp K  &kp M     &kp COMMA &kp DOT &kp FSLH &mt RSHFT RET
   // &mo 3           &mo 2   &kp LALT &kp LGUI &kp RET &none     &none  &kp SPACE &mo 1     &mo 3   &kp RET  &kp RCTRL
   //                      >;
// 			sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
   //              };

//  [_COLEMAK] = LAYOUT( \
//       KC_ESC,   KC_1,    KC_2,    KC_3,    KC_4,    KC_5,                       KC_6,    KC_7,    KC_8,    KC_9,    KC_0,    KC_GRV,
//       KC_TAB,   KC_Q,    KC_W,    KC_F,    KC_P,    KC_G,                       KC_J,    KC_L,    KC_U,    KC_Y,    KC_SCLN, KC_BSPC,
//       KC_LCTL,  KC_A,    KC_R,    KC_S,    KC_T,    KC_D,                       KC_H,    KC_N,    KC_E,    KC_I,    KC_O,    LT(_SYM,KC_QUOT),
//       KC_LSFT,  KC_Z,    KC_X,    KC_C,    KC_V,    KC_B,                       KC_K,    KC_M,    KC_COMM, KC_DOT,  KC_SLSH, KC_RSFT,
//       NAV,      LWR,     KC_LALT, KC_LGUI, KC_ENT,  KC_LBRC,                    KC_RBRC, KC_SPC,  RSE,     NAV,  KC_NUM,  KC_RCTL
//  ),

        };
};
